Algorithm RLBrain
// input : state
output : none // updates the given state till it reaches its optimal value

{
    if check_state_in_cache(state)
        if state is not optimal
            state.value = reward(-1) + maximum_action_values (all possible actions from that state)

    else
        initial the state with zero and store it in the cache
}



Algorithm maximum_action_values(state)
{
   {// Already implemented in MDP class 
       
        if state.actions is empty
        set state_is_optimal to true
        set state.optimal_policy to null
        result, status = check_board(state)
        set state.value = result according to the status provided
        
    }
    else if state.actions has only one element
        action_state = input_to_board(state, state.actions[0], symbol)

        if not check_state_in_cache(state)
        {
            initialize MDP to the cache
        }

        if action_state is optimal
            state.optimal_policy = state.actions[0]
            set state_is_optimal to be true
        return action_state.value

    else
        foreach action in actions
            if not check_state_in_cache(action)
                initialize MDP and store it in the cache
            add action.value to a iterable
            store the result of is action optimal in an iterable

            if all values in action optimal iterable is true
                set state to be optimal

        find maximum of action values
        if more than one action has the same action value
            randomly assign one action as optimal policy of the state
        else 
            assign the action with maximum value to be optimal policy
        return maximum action.value 
}


Algorithm check_board(state)
{
    //compute the given state and return the result of the game

    if first_player won 
        return true, f
    else if second_player won
        return true, s
    else  if the game is draw
        return true, draw 
    return false, Not over

}


Algorithm check_state_in_cache(state)
{
    if state in cache
        return true
    return false
}